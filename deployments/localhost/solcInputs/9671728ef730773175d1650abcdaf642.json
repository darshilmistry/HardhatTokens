{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";"
    },
    "contracts/PaymentInterface.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./IERC20.sol\";\n\ncontract PaymentInterface is IERC20 {\n\n//  events\n    event PI_AtemptToUpdateSupply( address from );\n    event PI_SupplyAltered( uint256 newSupply, uint256 change );\n    event PI_AttemptToapprove(address sender, address spender);\n    event PI_AllowanceSpent(address owner, address spender, uint256 amount);\n\n//  immutables\n    address immutable private i_owner;\n\n\n//  errors\n    error PI__invalidAddress(address invalidEntry);\n    error PI__attemptToOverspendAllowances(address owner, address spender);\n\n//  modifiers\n    modifier authorizedPesonnelOnly() {\n        require(msg.sender == i_owner, \"PI__trespassing\");\n        _;\n    }\n\n//  mappings\n    mapping(address => uint256) private balances;\n    mapping(address => mapping(address => uint256)) private allowances;\n\n//  variables\n    uint256 private TotalSupply;\n    string name;\n    string symbol;\n    uint8 decimals = 18;\n\n\n//  constructor\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n        i_owner = msg.sender;\n    }\n\n//  transaction functions\n    function mintCoins(uint256 amount) public authorizedPesonnelOnly{\n        address _sender = msg.sender;\n        emit PI_AtemptToUpdateSupply( _sender );\n        TotalSupply += amount;\n        balances[ i_owner ] += amount;\n        emit PI_SupplyAltered( TotalSupply, amount );\n        \n    }\n\n    function burnCoins(uint256 amount) public authorizedPesonnelOnly {\n        address _sender = msg.sender;\n        emit PI_AtemptToUpdateSupply( _sender );\n        if(_sender == address(0)) revert PI__invalidAddress(_sender);\n        \n        TotalSupply -= amount;\n        balances[_sender] -= amount;\n        emit PI_SupplyAltered( TotalSupply, amount );\n        \n    }\n\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\n        bool success = false;\n        if(to == address(0)) {\n            revert PI__invalidAddress(to);\n        }\n\n        else if(from == address(0)) {\n            revert PI__invalidAddress(from);\n        }\n\n        else {\n            unchecked {\n                balances[ from ] -= amount;\n                balances[ to ] += amount;\n                success = true;\n            }\n            emit Transfer(\n                from, to, amount\n            );\n        }\n        return success;\n    }\n\n    function approve(address spender, uint256 amount) public override returns(bool){\n        address sender = msg.sender;\n        bool success = false;\n        emit PI_AttemptToapprove(sender, spender);\n        if(spender == address(0)) revert PI__invalidAddress(spender);\n\n        allowances[sender][spender] = amount;\n        success = true; \n        \n        emit Approval(sender, spender, amount);\n        return success;\n    }\n\n    function transfer(address to, uint256 amount) external override returns (bool){\n        bool success = false;\n        if(to == address(0)) revert PI__invalidAddress(to);\n\n        success = transferFrom(msg.sender, to, amount);\n\n        return success;\n    \n    }\n    \n    function spendAllowances(address owner, address spender, uint256 amount) public {\n        uint256 _allowance = allowances[owner][spender];\n\n        if(amount > _allowance) revert PI__attemptToOverspendAllowances(owner, spender);\n\n        allowances[owner][spender] -= amount;\n\n        emit PI_AllowanceSpent(owner, spender, amount);\n\n    }\n\n//  public view/pure function\n\n    function whoIsOwner() public view returns(address) {\n        return i_owner;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return TotalSupply;\n    }\n\n    function balanceOf(address account) public view override returns(uint256) {\n        return balances[account];\n    }\n\n    \n    function allowance(address owner, address spender) public override view returns (uint256) {\n        return allowances[owner][spender];\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}