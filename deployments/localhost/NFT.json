{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "Coin__contractNotERC721",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trespasser",
          "type": "address"
        }
      ],
      "name": "Coin__foundTrespassing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Coin__managingUnOwnedToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "Coin_NewPlayerSignedUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Coin_TokenMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Recieved",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approval",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x28dd023112a1e0cc5509e56d79016cd21a8ffe5be2fe5d9c1d23a4bebf223397",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1254528",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x433abd226d70af88d3fc7d035cd1fa88cb96901b095cc74ba3da7d17ddd80f41",
    "transactionHash": "0x28dd023112a1e0cc5509e56d79016cd21a8ffe5be2fe5d9c1d23a4bebf223397",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1254528",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "GeekToken",
    "GTC"
  ],
  "numDeployments": 1,
  "solcInputHash": "d94acb6a608481571725be67e3ae95bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"Coin__contractNotERC721\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trespasser\",\"type\":\"address\"}],\"name\":\"Coin__foundTrespassing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Coin__managingUnOwnedToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"Coin_NewPlayerSignedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Coin_TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Recieved\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approval\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Darshil Mistry\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"This function is used to apoint a third party to transfer a token  for a spencific ID on the behalf of the owner.  It will firstly check if the token being approved is actually owned by the sender.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"this function first check if the reciever is a contract of a wallet.  if its conttract it would be checked first that the contract would be able to handel the token.  It can be used with an empty data element (\\\"\\\") but its not so secure  \"},\"setApprovalForAll(address,bool)\":{\"details\":\"This function can be used to appoint a third party to sell all of the tokens  In this use case the third party would be another constract. It can be used to either provide or revoke the previllage.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"This function is used to transfer a token from one addres to another.  it would first check if the message sender actually owns the token,  if not it will be reverted.\"}},\"stateVariables\":{\"tokenCount\":{\"details\":\"the tokenCount acts as the token ID\"}},\"title\":\"Non FungibleToken Handeler\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This is just designed to handle NFTS. The business logic can be found in the main solidity file.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721/NFT.sol\":\"NFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/ERC721/ERC721Reciever.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ERC721Reciever {\\n    \\n    function onERC721Recieved(\\n        address operator,\\n        address from, \\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns(bytes4);\\n\\n}\\n\",\"keccak256\":\"0x58ca9ba6dc93d797c244a3ddb1ae52fce938fbb3c2bc334c5b1852bb333a651c\",\"license\":\"MIT\"},\"contracts/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721{\\n\\n//  events\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n//  view functions\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n\\n//  Transaction functions\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external;\\n\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n\\n    function approve(address _approved, uint256 _tokenId) external;\\n\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n}\",\"keccak256\":\"0x354ce8674d7aaa021998876316e712359e749bcabd79cee0a198158702fc8918\",\"license\":\"MIT\"},\"contracts/ERC721/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./ERC721Reciever.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title Non FungibleToken Handeler\\n * @author Darshil Mistry\\n * @notice This is just designed to handle NFTS. The business logic can be found in the main solidity file.\\n */\\ncontract NFT is IERC721, ERC721Reciever {\\n    // state variables\\n    mapping(uint256 => address) TokenOwners;\\n\\n    mapping(uint256 => string) TokenURIs;\\n\\n    mapping(uint256 => address) Players;\\n    /**\\n     * @dev the tokenCount acts as the token ID\\n     */\\n    uint256 tokenCount;\\n\\n    mapping(address => uint256) Balances;\\n\\n    mapping(uint256 => address) TokenApprovals;\\n\\n    mapping(address => mapping(address => bool)) OperatorApprovals;\\n\\n    // immutables\\n    string name;\\n    string symbol;\\n    address i_owner;\\n\\n    // events\\n    event Coin_NewPlayerSignedUp(address player);\\n    event Coin_TokenMinted(string tokenURI, uint256 tokenId);\\n    \\n    // errors\\n    error Coin__foundTrespassing(address trespasser);\\n    error Coin__contractNotERC721(bytes reason);\\n    error Coin__managingUnOwnedToken(address sender);\\n\\n    // modifiers\\n    /** \\n    *@dev this modifier reverts if the message sender is not the deployer.\\n    */\\n    modifier authorizedPersonnelOnly() {\\n        if (msg.sender != i_owner) revert Coin__foundTrespassing(msg.sender);\\n        _;\\n    }\\n\\n    // transaction functions\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n        i_owner = msg.sender;\\n        tokenCount = 0;\\n    }\\n\\n    /**\\n     * @dev The mint function creates a token and adds the token to the owners address. \\n     * Later when needed, the tokens can be transfered to another account. \\n     */\\n    function mint(string memory tokenURI) authorizedPersonnelOnly private returns (uint256) {\\n        address owner = msg.sender;\\n        Balances[owner] += 1;\\n        attachURI(tokenCount, tokenURI);\\n        TokenOwners[tokenCount] = owner;\\n        emit Coin_TokenMinted(tokenURI, tokenCount);\\n        return(tokenCount);\\n    }\\n\\n    /**\\n     * @dev This function works with the mint function to attach uris to newly generated NFTS \\n     */\\n    function attachURI(uint256 tokenID, string memory URI) private authorizedPersonnelOnly {\\n        TokenURIs[tokenID] = URI;\\n    }\\n\\n    /**\\n     * @dev This function is used to apoint a third party to transfer a token \\n     * for a spencific ID on the behalf of the owner.\\n     * \\n     * It will firstly check if the token being approved is actually owned by the sender.\\n     */\\n    function approve(address operator, uint256 tokenId) public override {\\n        if(TokenOwners[tokenId] == msg.sender) { \\n            TokenApprovals[tokenId] = operator;\\n            emit Approval(msg.sender, operator, tokenId);\\n        } else {\\n            revert Coin__managingUnOwnedToken(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev This function can be used to appoint a third party to sell all of the tokens\\n     * \\n     * In this use case the third party would be another constract.\\n     * It can be used to either provide or revoke the previllage.\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approval\\n    ) public override {\\n        OperatorApprovals[msg.sender][operator] = approval;\\n        emit ApprovalForAll(msg.sender, operator, approval);\\n    }\\n\\n    /** \\n     * @dev This function is used to transfer a token from one addres to another.\\n     * \\n     * it would first check if the message sender actually owns the token, \\n     * if not it will be reverted.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public override {\\n            if(TokenOwners[tokenId] == msg.sender) {\\n            delete TokenApprovals[tokenId];\\n            TokenOwners[tokenId] = to;\\n            Balances[from] -= 1;\\n            Balances[to] += 1;\\n            emit Transfer(from, to, tokenId);\\n        } else {\\n            revert Coin__managingUnOwnedToken(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev this function first check if the reciever is a contract of a wallet. \\n     * if its conttract it would be checked first that the contract would be able to handel the token.\\n     * \\n     * It can be used with an empty data element (\\\"\\\") but its not so secure  \\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override {\\n        checkOnERC721Received(from, to, tokenId, data);\\n        transferFrom(from, to, tokenId);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev This function is used to check if a reciever is a contract that can handle erc721 tokens. It is \\n     * used before a safe transfer to prevent tokens getting stuck in places where the are not supposed to be \\ud83d\\ude05\\n     */\\n    function checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (Address.isContract(to)) {\\n            try ERC721Reciever(to).onERC721Recieved( msg.sender, from, tokenId, data) returns (bytes4 retval) {\\n                return retval == ERC721Reciever.onERC721Recieved.selector;\\n            } catch (bytes memory reason) {\\n                revert Coin__contractNotERC721(reason);\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    // public view functions\\n\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return Balances[owner];\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return TokenOwners[tokenId];\\n    }\\n\\n    function getApproved(uint256 tokenId) public view returns (address) {\\n        return TokenApprovals[tokenId];\\n    }\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool) {\\n        return OperatorApprovals[owner][operator];\\n    }\\n\\n    function getName() public view returns (string memory) {\\n        return name;\\n    }\\n\\n    function getSymbol() public view returns (string memory) {\\n        return symbol;\\n    }\\n\\n    function onERC721Recieved(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override returns (bytes4) {}\\n}\",\"keccak256\":\"0xe2352b55c15ab59a72a737c2471e30637827913361ca4b604e4e810e102b46f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001a1938038062001a1983398181016040528101906200003791906200023f565b81600790816200004891906200050f565b5080600890816200005a91906200050f565b5033600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006003819055505050620005f6565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200011582620000ca565b810181811067ffffffffffffffff82111715620001375762000136620000db565b5b80604052505050565b60006200014c620000ac565b90506200015a82826200010a565b919050565b600067ffffffffffffffff8211156200017d576200017c620000db565b5b6200018882620000ca565b9050602081019050919050565b60005b83811015620001b557808201518184015260208101905062000198565b60008484015250505050565b6000620001d8620001d2846200015f565b62000140565b905082815260208101848484011115620001f757620001f6620000c5565b5b6200020484828562000195565b509392505050565b600082601f830112620002245762000223620000c0565b5b815162000236848260208601620001c1565b91505092915050565b60008060408385031215620002595762000258620000b6565b5b600083015167ffffffffffffffff8111156200027a5762000279620000bb565b5b62000288858286016200020c565b925050602083015167ffffffffffffffff811115620002ac57620002ab620000bb565b5b620002ba858286016200020c565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200031757607f821691505b6020821081036200032d576200032c620002cf565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000358565b620003a3868362000358565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003f0620003ea620003e484620003bb565b620003c5565b620003bb565b9050919050565b6000819050919050565b6200040c83620003cf565b620004246200041b82620003f7565b84845462000365565b825550505050565b600090565b6200043b6200042c565b6200044881848462000401565b505050565b5b8181101562000470576200046460008262000431565b6001810190506200044e565b5050565b601f821115620004bf57620004898162000333565b620004948462000348565b81016020851015620004a4578190505b620004bc620004b38562000348565b8301826200044d565b50505b505050565b600082821c905092915050565b6000620004e460001984600802620004c4565b1980831691505092915050565b6000620004ff8383620004d1565b9150826002028217905092915050565b6200051a82620002c4565b67ffffffffffffffff811115620005365762000535620000db565b5b620005428254620002fe565b6200054f82828562000474565b600060209050601f83116001811462000587576000841562000572578287015190505b6200057e8582620004f1565b865550620005ee565b601f198416620005978662000333565b60005b82811015620005c1578489015182556001820191506020850194506020810190506200059a565b86831015620005e15784890151620005dd601f891682620004d1565b8355505b6001600288020188555050505b505050505050565b61141380620006066000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636352211e116100715780636352211e1461015257806370a082311461018257806391242753146101b2578063a22cb465146101e2578063b88d4fde146101fe578063e985e9c51461021a576100a9565b8063081812fc146100ae578063095ea7b3146100de57806315070401146100fa57806317d7de7c1461011857806323b872dd14610136575b600080fd5b6100c860048036038101906100c39190610ba1565b61024a565b6040516100d59190610c0f565b60405180910390f35b6100f860048036038101906100f39190610c56565b610287565b005b6101026103df565b60405161010f9190610d26565b60405180910390f35b610120610471565b60405161012d9190610d26565b60405180910390f35b610150600480360381019061014b9190610d48565b610503565b005b61016c60048036038101906101679190610ba1565b61073f565b6040516101799190610c0f565b60405180910390f35b61019c60048036038101906101979190610d9b565b61077b565b6040516101a99190610dd7565b60405180910390f35b6101cc60048036038101906101c79190610e57565b6107c4565b6040516101d99190610f1a565b60405180910390f35b6101fc60048036038101906101f79190610f6d565b6107cf565b005b610218600480360381019061021391906110dd565b6108cc565b005b610234600480360381019061022f9190611160565b610945565b60405161024191906111af565b60405180910390f35b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361039e57816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a46103db565b336040517f72ca15c00000000000000000000000000000000000000000000000000000000081526004016103d29190610c0f565b60405180910390fd5b5050565b6060600880546103ee906111f9565b80601f016020809104026020016040519081016040528092919081815260200182805461041a906111f9565b80156104675780601f1061043c57610100808354040283529160200191610467565b820191906000526020600020905b81548152906001019060200180831161044a57829003601f168201915b5050505050905090565b606060078054610480906111f9565b80601f01602080910402602001604051908101604052809291908181526020018280546104ac906111f9565b80156104f95780601f106104ce576101008083540402835291602001916104f9565b820191906000526020600020905b8154815290600101906020018083116104dc57829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106fd576005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461063f9190611259565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610696919061128d565b92505081905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461073a565b336040517f72ca15c00000000000000000000000000000000000000000000000000000000081526004016107319190610c0f565b60405180910390fd5b505050565b600080600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600095945050505050565b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516108c091906111af565b60405180910390a35050565b6108d8848484846109d9565b506108e4848484610503565b818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006109e484610b34565b15610b27578373ffffffffffffffffffffffffffffffffffffffff166391242753338786866040518563ffffffff1660e01b8152600401610a289493929190611316565b6020604051808303816000875af1925050508015610a6457506040513d601f19601f82011682018060405250810190610a61919061138e565b60015b610ad7573d8060008114610a94576040519150601f19603f3d011682016040523d82523d6000602084013e610a99565b606091505b50806040517fae4d1fe5000000000000000000000000000000000000000000000000000000008152600401610ace91906113bb565b60405180910390fd5b639124275360e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050610b2c565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610b7e81610b6b565b8114610b8957600080fd5b50565b600081359050610b9b81610b75565b92915050565b600060208284031215610bb757610bb6610b61565b5b6000610bc584828501610b8c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bf982610bce565b9050919050565b610c0981610bee565b82525050565b6000602082019050610c246000830184610c00565b92915050565b610c3381610bee565b8114610c3e57600080fd5b50565b600081359050610c5081610c2a565b92915050565b60008060408385031215610c6d57610c6c610b61565b5b6000610c7b85828601610c41565b9250506020610c8c85828601610b8c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610cd0578082015181840152602081019050610cb5565b60008484015250505050565b6000601f19601f8301169050919050565b6000610cf882610c96565b610d028185610ca1565b9350610d12818560208601610cb2565b610d1b81610cdc565b840191505092915050565b60006020820190508181036000830152610d408184610ced565b905092915050565b600080600060608486031215610d6157610d60610b61565b5b6000610d6f86828701610c41565b9350506020610d8086828701610c41565b9250506040610d9186828701610b8c565b9150509250925092565b600060208284031215610db157610db0610b61565b5b6000610dbf84828501610c41565b91505092915050565b610dd181610b6b565b82525050565b6000602082019050610dec6000830184610dc8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610e1757610e16610df2565b5b8235905067ffffffffffffffff811115610e3457610e33610df7565b5b602083019150836001820283011115610e5057610e4f610dfc565b5b9250929050565b600080600080600060808688031215610e7357610e72610b61565b5b6000610e8188828901610c41565b9550506020610e9288828901610c41565b9450506040610ea388828901610b8c565b935050606086013567ffffffffffffffff811115610ec457610ec3610b66565b5b610ed088828901610e01565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610f1481610edf565b82525050565b6000602082019050610f2f6000830184610f0b565b92915050565b60008115159050919050565b610f4a81610f35565b8114610f5557600080fd5b50565b600081359050610f6781610f41565b92915050565b60008060408385031215610f8457610f83610b61565b5b6000610f9285828601610c41565b9250506020610fa385828601610f58565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610fea82610cdc565b810181811067ffffffffffffffff8211171561100957611008610fb2565b5b80604052505050565b600061101c610b57565b90506110288282610fe1565b919050565b600067ffffffffffffffff82111561104857611047610fb2565b5b61105182610cdc565b9050602081019050919050565b82818337600083830152505050565b600061108061107b8461102d565b611012565b90508281526020810184848401111561109c5761109b610fad565b5b6110a784828561105e565b509392505050565b600082601f8301126110c4576110c3610df2565b5b81356110d484826020860161106d565b91505092915050565b600080600080608085870312156110f7576110f6610b61565b5b600061110587828801610c41565b945050602061111687828801610c41565b935050604061112787828801610b8c565b925050606085013567ffffffffffffffff81111561114857611147610b66565b5b611154878288016110af565b91505092959194509250565b6000806040838503121561117757611176610b61565b5b600061118585828601610c41565b925050602061119685828601610c41565b9150509250929050565b6111a981610f35565b82525050565b60006020820190506111c460008301846111a0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061121157607f821691505b602082108103611224576112236111ca565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061126482610b6b565b915061126f83610b6b565b92508282039050818111156112875761128661122a565b5b92915050565b600061129882610b6b565b91506112a383610b6b565b92508282019050808211156112bb576112ba61122a565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60006112e8826112c1565b6112f281856112cc565b9350611302818560208601610cb2565b61130b81610cdc565b840191505092915050565b600060808201905061132b6000830187610c00565b6113386020830186610c00565b6113456040830185610dc8565b818103606083015261135781846112dd565b905095945050505050565b61136b81610edf565b811461137657600080fd5b50565b60008151905061138881611362565b92915050565b6000602082840312156113a4576113a3610b61565b5b60006113b284828501611379565b91505092915050565b600060208201905081810360008301526113d581846112dd565b90509291505056fea2646970667358221220c25f8eeb4a7d0e334d13623f71965a7de4fa8fced32fa005071daa1e9e3f77ef64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80636352211e116100715780636352211e1461015257806370a082311461018257806391242753146101b2578063a22cb465146101e2578063b88d4fde146101fe578063e985e9c51461021a576100a9565b8063081812fc146100ae578063095ea7b3146100de57806315070401146100fa57806317d7de7c1461011857806323b872dd14610136575b600080fd5b6100c860048036038101906100c39190610ba1565b61024a565b6040516100d59190610c0f565b60405180910390f35b6100f860048036038101906100f39190610c56565b610287565b005b6101026103df565b60405161010f9190610d26565b60405180910390f35b610120610471565b60405161012d9190610d26565b60405180910390f35b610150600480360381019061014b9190610d48565b610503565b005b61016c60048036038101906101679190610ba1565b61073f565b6040516101799190610c0f565b60405180910390f35b61019c60048036038101906101979190610d9b565b61077b565b6040516101a99190610dd7565b60405180910390f35b6101cc60048036038101906101c79190610e57565b6107c4565b6040516101d99190610f1a565b60405180910390f35b6101fc60048036038101906101f79190610f6d565b6107cf565b005b610218600480360381019061021391906110dd565b6108cc565b005b610234600480360381019061022f9190611160565b610945565b60405161024191906111af565b60405180910390f35b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361039e57816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a46103db565b336040517f72ca15c00000000000000000000000000000000000000000000000000000000081526004016103d29190610c0f565b60405180910390fd5b5050565b6060600880546103ee906111f9565b80601f016020809104026020016040519081016040528092919081815260200182805461041a906111f9565b80156104675780601f1061043c57610100808354040283529160200191610467565b820191906000526020600020905b81548152906001019060200180831161044a57829003601f168201915b5050505050905090565b606060078054610480906111f9565b80601f01602080910402602001604051908101604052809291908181526020018280546104ac906111f9565b80156104f95780601f106104ce576101008083540402835291602001916104f9565b820191906000526020600020905b8154815290600101906020018083116104dc57829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106fd576005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461063f9190611259565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610696919061128d565b92505081905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461073a565b336040517f72ca15c00000000000000000000000000000000000000000000000000000000081526004016107319190610c0f565b60405180910390fd5b505050565b600080600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600095945050505050565b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516108c091906111af565b60405180910390a35050565b6108d8848484846109d9565b506108e4848484610503565b818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006109e484610b34565b15610b27578373ffffffffffffffffffffffffffffffffffffffff166391242753338786866040518563ffffffff1660e01b8152600401610a289493929190611316565b6020604051808303816000875af1925050508015610a6457506040513d601f19601f82011682018060405250810190610a61919061138e565b60015b610ad7573d8060008114610a94576040519150601f19603f3d011682016040523d82523d6000602084013e610a99565b606091505b50806040517fae4d1fe5000000000000000000000000000000000000000000000000000000008152600401610ace91906113bb565b60405180910390fd5b639124275360e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050610b2c565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610b7e81610b6b565b8114610b8957600080fd5b50565b600081359050610b9b81610b75565b92915050565b600060208284031215610bb757610bb6610b61565b5b6000610bc584828501610b8c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bf982610bce565b9050919050565b610c0981610bee565b82525050565b6000602082019050610c246000830184610c00565b92915050565b610c3381610bee565b8114610c3e57600080fd5b50565b600081359050610c5081610c2a565b92915050565b60008060408385031215610c6d57610c6c610b61565b5b6000610c7b85828601610c41565b9250506020610c8c85828601610b8c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610cd0578082015181840152602081019050610cb5565b60008484015250505050565b6000601f19601f8301169050919050565b6000610cf882610c96565b610d028185610ca1565b9350610d12818560208601610cb2565b610d1b81610cdc565b840191505092915050565b60006020820190508181036000830152610d408184610ced565b905092915050565b600080600060608486031215610d6157610d60610b61565b5b6000610d6f86828701610c41565b9350506020610d8086828701610c41565b9250506040610d9186828701610b8c565b9150509250925092565b600060208284031215610db157610db0610b61565b5b6000610dbf84828501610c41565b91505092915050565b610dd181610b6b565b82525050565b6000602082019050610dec6000830184610dc8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610e1757610e16610df2565b5b8235905067ffffffffffffffff811115610e3457610e33610df7565b5b602083019150836001820283011115610e5057610e4f610dfc565b5b9250929050565b600080600080600060808688031215610e7357610e72610b61565b5b6000610e8188828901610c41565b9550506020610e9288828901610c41565b9450506040610ea388828901610b8c565b935050606086013567ffffffffffffffff811115610ec457610ec3610b66565b5b610ed088828901610e01565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610f1481610edf565b82525050565b6000602082019050610f2f6000830184610f0b565b92915050565b60008115159050919050565b610f4a81610f35565b8114610f5557600080fd5b50565b600081359050610f6781610f41565b92915050565b60008060408385031215610f8457610f83610b61565b5b6000610f9285828601610c41565b9250506020610fa385828601610f58565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610fea82610cdc565b810181811067ffffffffffffffff8211171561100957611008610fb2565b5b80604052505050565b600061101c610b57565b90506110288282610fe1565b919050565b600067ffffffffffffffff82111561104857611047610fb2565b5b61105182610cdc565b9050602081019050919050565b82818337600083830152505050565b600061108061107b8461102d565b611012565b90508281526020810184848401111561109c5761109b610fad565b5b6110a784828561105e565b509392505050565b600082601f8301126110c4576110c3610df2565b5b81356110d484826020860161106d565b91505092915050565b600080600080608085870312156110f7576110f6610b61565b5b600061110587828801610c41565b945050602061111687828801610c41565b935050604061112787828801610b8c565b925050606085013567ffffffffffffffff81111561114857611147610b66565b5b611154878288016110af565b91505092959194509250565b6000806040838503121561117757611176610b61565b5b600061118585828601610c41565b925050602061119685828601610c41565b9150509250929050565b6111a981610f35565b82525050565b60006020820190506111c460008301846111a0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061121157607f821691505b602082108103611224576112236111ca565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061126482610b6b565b915061126f83610b6b565b92508282039050818111156112875761128661122a565b5b92915050565b600061129882610b6b565b91506112a383610b6b565b92508282019050808211156112bb576112ba61122a565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60006112e8826112c1565b6112f281856112cc565b9350611302818560208601610cb2565b61130b81610cdc565b840191505092915050565b600060808201905061132b6000830187610c00565b6113386020830186610c00565b6113456040830185610dc8565b818103606083015261135781846112dd565b905095945050505050565b61136b81610edf565b811461137657600080fd5b50565b60008151905061138881611362565b92915050565b6000602082840312156113a4576113a3610b61565b5b60006113b284828501611379565b91505092915050565b600060208201905081810360008301526113d581846112dd565b90509291505056fea2646970667358221220c25f8eeb4a7d0e334d13623f71965a7de4fa8fced32fa005071daa1e9e3f77ef64736f6c63430008120033",
  "devdoc": {
    "author": "Darshil Mistry",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "This function is used to apoint a third party to transfer a token  for a spencific ID on the behalf of the owner.  It will firstly check if the token being approved is actually owned by the sender."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "this function first check if the reciever is a contract of a wallet.  if its conttract it would be checked first that the contract would be able to handel the token.  It can be used with an empty data element (\"\") but its not so secure  "
      },
      "setApprovalForAll(address,bool)": {
        "details": "This function can be used to appoint a third party to sell all of the tokens  In this use case the third party would be another constract. It can be used to either provide or revoke the previllage."
      },
      "transferFrom(address,address,uint256)": {
        "details": "This function is used to transfer a token from one addres to another.  it would first check if the message sender actually owns the token,  if not it will be reverted."
      }
    },
    "stateVariables": {
      "tokenCount": {
        "details": "the tokenCount acts as the token ID"
      }
    },
    "title": "Non FungibleToken Handeler",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This is just designed to handle NFTS. The business logic can be found in the main solidity file.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 946,
        "contract": "contracts/ERC721/NFT.sol:NFT",
        "label": "TokenOwners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 950,
        "contract": "contracts/ERC721/NFT.sol:NFT",
        "label": "TokenURIs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 954,
        "contract": "contracts/ERC721/NFT.sol:NFT",
        "label": "Players",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 957,
        "contract": "contracts/ERC721/NFT.sol:NFT",
        "label": "tokenCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 961,
        "contract": "contracts/ERC721/NFT.sol:NFT",
        "label": "Balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 965,
        "contract": "contracts/ERC721/NFT.sol:NFT",
        "label": "TokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 971,
        "contract": "contracts/ERC721/NFT.sol:NFT",
        "label": "OperatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 973,
        "contract": "contracts/ERC721/NFT.sol:NFT",
        "label": "name",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 975,
        "contract": "contracts/ERC721/NFT.sol:NFT",
        "label": "symbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 977,
        "contract": "contracts/ERC721/NFT.sol:NFT",
        "label": "i_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}